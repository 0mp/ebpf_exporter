programs:
  - name: bio
    metrics:
      histograms:
        - name: bio_latency
          help: Block IO latency histogram with microsecond buckets
          table: io_latency
          bucket_type: exp2
          bucket_min: 0
          bucket_max: 31
          labels:
            - name: device
              decoders:
                - name: string
            - name: operation
              decoders:
                - name: static_map
                  static_map:
                    0x1: read
                    0x2: write
            - name: bucket
              decoders:
                - name: uint64
        - name: bio_size
          help: Block IO size histogram with kibibyte buckets
          table: io_size
          bucket_type: exp2
          bucket_min: 0
          bucket_max: 15
          labels:
            - name: device
              decoders:
                - name: string
            - name: operation
              decoders:
                - name: static_map
                  static_map:
                    0x1: read
                    0x2: write
            - name: bucket
              decoders:
                - name: uint64
    kprobes:
      blk_start_request: trace_req_start
      blk_mq_start_request: trace_req_start
      blk_account_io_completion: trace_req_completion
    code: |
      #include <uapi/linux/ptrace.h>
      #include <linux/blkdev.h>
      #include <linux/blk_types.h>

      typedef struct disk_key {
        char disk[DISK_NAME_LEN];
        u8 op;
        u64 slot;
      } disk_key_t;

      // Max number of disks we expect to see on the host
      const u8 max_disks = 255;

      // Hash to temporily hold the start time of each bio request, max 10k in-flight by default
      BPF_HASH(start, struct request *);

      // Histograms to record latencies, 32 buckets per disk in us (up to 2s)
      BPF_HISTOGRAM(io_latency, disk_key_t, 32 * max_disks);

      // Histograms to record sizes, 16 buckets per disk in kib (up to 32mib)
      BPF_HISTOGRAM(io_size, disk_key_t, 16 * max_disks);

      // Record start time of a request
      int trace_req_start(struct pt_regs *ctx, struct request *req)
      {
        u64 ts = bpf_ktime_get_ns();
        start.update(&req, &ts);
        return 0;
      }

      // Calculate request duration and store in appropriate histogram bucket
      int trace_req_completion(struct pt_regs *ctx, struct request *req, unsigned int bytes)
      {
        u64 *tsp, delta;

        // Fetch timestamp and calculate delta
        tsp = start.lookup(&req);
        if (tsp == 0) {
          return 0; // missed issue
        }

        delta = bpf_ktime_get_ns() - *tsp;

        // Convert to microseconds
        delta /= 1000;

        // Latency histogram key
        u64 latency_slot = bpf_log2l(delta);

        // Cap latency bucket at 31
        if (latency_slot > 31) {
          latency_slot = 31;
        }

        disk_key_t latency_key = { .slot = latency_slot };
        bpf_probe_read(&latency_key.disk, sizeof(latency_key.disk), req->rq_disk->disk_name);

        // Request size histogram key
        u64 size_slot = bpf_log2(bytes / 1024);

        // Cap latency bucket at 15
        if (size_slot > 15) {
          size_slot = 15;
        }

        disk_key_t size_key = { .slot = size_slot };
        bpf_probe_read(&size_key.disk, sizeof(size_key.disk), req->rq_disk->disk_name);

        if ((req->cmd_flags & REQ_OP_MASK) == REQ_OP_WRITE) {
          latency_key.op = 2;
          size_key.op    = 2;
        } else {
          latency_key.op = 1;
          size_key.op    = 1;
        }

        io_latency.increment(latency_key);
        io_size.increment(size_key);

        start.delete(&req);

        return 0;
      }
