programs:
  # See:
  # * https://github.com/iovisor/bcc/blob/master/tools/llcstat.py
  # * https://github.com/iovisor/bcc/blob/master/tools/llcstat_example.txt
  - name: llcstat
    metrics:
      counters:
        - name: llc_references_total
          help: Last level cache operations by type
          table: references
          labels:
            - name: cpu
              decoders:
                - name: uint64
        - name: llc_misses_total
          help: Last level cache operations by type
          table: misses
          labels:
            - name: cpu
              decoders:
                - name: uint64
    perf_events:
      - type: 0x0 # HARDWARE
        name: 0x3 # PERF_COUNT_HW_CACHE_MISSES
        target: on_cache_miss
        sample_period: 1000
      - type: 0x0 # HARDWARE
        name: 0x2 # PERF_COUNT_HW_CACHE_REFERENCES
        target: on_cache_reference
        sample_period: 1000
    code: |
      #include <linux/ptrace.h>
      #include <uapi/linux/bpf_perf_event.h>

      const int max_cpus = 128;

      BPF_ARRAY(references, u64, max_cpus);
      BPF_ARRAY(misses, u64, max_cpus);

      int on_cache_miss(struct bpf_perf_event_data *ctx) {
          misses.increment(bpf_get_smp_processor_id());
          return 0;
      }

      int on_cache_reference(struct bpf_perf_event_data *ctx) {
          references.increment(bpf_get_smp_processor_id());
          return 0;
      }
